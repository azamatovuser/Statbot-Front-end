from aiogram import types
from loader import dp, bot
from keyboards.inline.captcha_button import captcha_button
from .my_bots import bot_id
from keyboards.inline.detail_information_about_bot import detail_information_about_bot
from keyboards.inline.set_captcha_button import set_captcha_button
from keyboards.inline.captcha_button_off import captcha_button_off
import requests
from data.config import BASE_URL
import random



# rs = requests.get(url=f"{BASE_URL}bot/captcha/")
# data = rs.json()
special_food_emojis = []


@dp.callback_query_handler(text="captcha")
async def get_captcha_setting(callback_query: types.CallbackQuery):
    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, text='–ö–∞–ø—á–∞ ‚úÖ\n\n–Ø –ø—Ä–æ—á–∏—Ç–∞–ª(–∞) –ø—Ä–∞–≤–∏–ª–∞ [–ø—Ä–æ—Å—Ç–∞—è]\n\n–ú–æ–∂–Ω–æ '
                              '–≤—ã–∫–ª—é—á–∏—Ç—å –∫–∞–ø—á—É —Å–æ–≤—Å–µ–º, –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –µ–µ —Ç–∏–ø –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å'
                              '–ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ', reply_markup=captcha_button)


@dp.callback_query_handler(text="back_captcha")
async def process_callback_query(callback_query: types.CallbackQuery):
    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, text=f'{bot_id[0]}\n\n–ê—É–¥–∏—Ç–æ—Ä–∏—è –±–æ—Ç–∞\n‚úÖ –ê–∫—Ç–∏–≤–Ω–∞—è: 4 —á–µ–ª.\nüö´ –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª–∏: 0 —á–µ–ª.\n\n–ü–æ–ª –∞—É–¥–∏—Ç–æ—Ä–∏–∏\nüôç –ú: 74%\nüôç –ñ: 26%\n\n–Ø–∑—ã–∫–∏ –∞—É–¥–∏—Ç–æ—Ä–∏–∏\nüáÆüá∏ RU: 39%\nüáÆüá∏ EN: 39%\nüáÆüá∏ TR: 17.5%\nüáÆüá∏ –î—Ä—É–≥–∏–µ: 39%\n\n–ü–æ–¥–∫–ª—é—á–µ–Ω–Ω—ã–µ –∫–∞–Ω–∞–ª—ã\nüîó –ö–∞–Ω–∞–ª1\nüîó –ö–∞–Ω–∞–ª2\n\n–ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ 11 –¥–µ–∫–∞–±—Ä—è 2023 –≥–æ–¥–∞ –≤ 13:23:21', reply_markup=detail_information_about_bot)


@dp.callback_query_handler(text="set_captcha")
async def captcha_set(callback_query: types.CallbackQuery):
    await bot.edit_message_text(chat_id=callback_query.from_user.id, message_id=callback_query.message.message_id, text='–ù–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–ª–µ–≤–∞ –¥–ª—è –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –∫–∞–ø—Ç—á–∏, '
                                        '–∞ –∑–∞—Ç–µ–º –Ω–∞ –∫–Ω–æ–ø–∫—É —Å–ø—Ä–∞–≤–∞ –¥–ª—è –±–æ–ª–µ–µ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ–π'
                                        '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏', reply_markup=set_captcha_button)


@dp.callback_query_handler(text="back_to_set_captcha")
async def back_to_set(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text='–ö–∞–ø—á–∞ ‚úÖ\n\n–Ø –ø—Ä–æ—á–∏—Ç–∞–ª(–∞) –ø—Ä–∞–≤–∏–ª–∞ [–ø—Ä–æ—Å—Ç–∞—è]\n\n–ú–æ–∂–Ω–æ '
                              '–≤—ã–∫–ª—é—á–∏—Ç—å –∫–∞–ø—á—É —Å–æ–≤—Å–µ–º, –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –µ–µ —Ç–∏–ø –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å'
                              '–ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ', reply_markup=captcha_button)


@dp.callback_query_handler(text="turn_off_captcha")
async def turn_off(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text='–ö–∞–ø—á–∞ ‚õîÔ∏è\n\n–Ø –ø—Ä–æ—á–∏—Ç–∞–ª(–∞) –ø—Ä–∞–≤–∏–ª–∞ [–ø—Ä–æ—Å—Ç–∞—è]\n\n–ú–æ–∂–Ω–æ '
                              '–≤—ã–∫–ª—é—á–∏—Ç—å –∫–∞–ø—á—É —Å–æ–≤—Å–µ–º, –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –µ–µ —Ç–∏–ø –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å'
                              '–ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ', reply_markup=captcha_button_off)


@dp.callback_query_handler(text="turn_on_captcha")
async def turn_on(call: types.CallbackQuery):
    await bot.edit_message_text(chat_id=call.from_user.id, message_id=call.message.message_id, text='–ö–∞–ø—á–∞ ‚úÖ\n\n–Ø –ø—Ä–æ—á–∏—Ç–∞–ª(–∞) –ø—Ä–∞–≤–∏–ª–∞ [–ø—Ä–æ—Å—Ç–∞—è]\n\n–ú–æ–∂–Ω–æ '
                              '–≤—ã–∫–ª—é—á–∏—Ç—å –∫–∞–ø—á—É —Å–æ–≤—Å–µ–º, –∏–ª–∏ –∏–∑–º–µ–Ω–∏—Ç—å –µ–µ —Ç–∏–ø –∏ —Å–ª–æ–∂–Ω–æ—Å—Ç—å —Å'
                              '–ø–æ–º–æ—â—å—é –∫–Ω–æ–ø–æ–∫ –Ω–∏–∂–µ', reply_markup=captcha_button)


@dp.callback_query_handler(text="food_captcha")
async def food(call: types.CallbackQuery):
    global selected_emoji
    food_emojis = ["üå≠", "üçî", "üçï", "üöì", "üöë", "üöí", "üçì", "üçë", "üçÜ"]

    # –í—ã–±–æ—Ä —Ç—Ä–µ—Ö —Å–ª—É—á–∞–π–Ω—ã—Ö —ç–º–æ–¥–∑–∏ –∏–∑ —Å–ø–∏—Å–∫–∞
    random_food_emojis = random.sample(food_emojis, 3)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è —ç–º–æ–¥–∑–∏ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º callback_data
    has_special_emoji = False
    for emoji in random_food_emojis:
        if emoji in special_food_emojis:
            has_special_emoji = True
            break

    # –ï—Å–ª–∏ –Ω–µ—Ç —ç–º–æ–¥–∑–∏ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º callback_data, –≤—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –µ–≥–æ
    if not has_special_emoji:
        special_emoji = random.choice(random_food_emojis)
        special_food_emojis.append(special_emoji)
        random_food_emojis.remove(special_emoji)

    # –°–æ–∑–¥–∞–Ω–∏–µ inline-–∫–Ω–æ–ø–æ–∫ –¥–ª—è –≤—ã–±—Ä–∞–Ω–Ω—ã—Ö —ç–º–æ–¥–∑–∏
    keyboard = types.InlineKeyboardMarkup()
    for emoji in random_food_emojis:
        callback_data = f"captcha_{emoji}"
        keyboard.add(types.InlineKeyboardButton(text=emoji, callback_data=callback_data))

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–∫–∏ —Å –æ—Ç–¥–µ–ª—å–Ω—ã–º callback_data –Ω–∞ —Å–ª—É—á–∞–π–Ω—É—é –ø–æ–∑–∏—Ü–∏—é
    special_callback_data = f"captcha_{special_emoji}_special"
    random_position = random.randint(0, len(random_food_emojis))
    keyboard.insert(types.InlineKeyboardButton(text=special_emoji, callback_data=special_callback_data))

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–ø—á–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    await bot.edit_message_text(
        chat_id=call.from_user.id,
        message_id=call.message.message_id,
        text=f'–í–∞—à–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—Å—Ç—É–ø–ª–µ–Ω–∏–µ\n\n–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É {special_emoji} —Å –æ–¥–Ω–∏–º –∏–∑ —ç–º–æ–¥–∑–∏ –Ω–∏–∂–µ, —á—Ç–æ–±—ã –ø—Ä–æ–π—Ç–∏ –∫–∞–ø—á—É –∏ –ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª',
        reply_markup=keyboard
    )


@dp.callback_query_handler(lambda c: c.data.startswith('captcha'))
async def handle_captcha(callback_query: types.CallbackQuery):
    callback_data = callback_query.data

    if callback_data.endswith('_special'):
        # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è —Å —Ç–µ–∫—Å—Ç–æ–º –∏ –∫–Ω–æ–ø–∫–æ–π "–î–æ–º–æ–π"
        await bot.edit_message_text(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            text='–ö–∞–ø—á–∞ –ø—Ä–æ–π–¥–µ–Ω–∞\n\n–ë–æ–ª—å—à–æ–µ —Å–ø–∞—Å–∏–±–æ, –¥–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É –±—É–¥–µ—Ç –æ—Ç–∫—Ä—ã—Ç –≤ –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è',
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton(text='–í–µ—Ä–Ω—É—Ç—å—Å—è', callback_data='captcha')
            )
        )

    else:
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
        await bot.edit_message_text(
            chat_id=callback_query.from_user.id,
            message_id=callback_query.message.message_id,
            text='–ö–∞–ø—á–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –ø–æ–ø—ã—Ç–∫—É!',
            reply_markup=types.InlineKeyboardMarkup().add(
                types.InlineKeyboardButton(text='–°–Ω–∞—á–∞–ª–∞', callback_data='set_captcha')
            ))